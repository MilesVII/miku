{
  "version": 3,
  "sources": ["../../../src/prinzeugen/src/utils/utils.ts", "../../../src/prinzeugen/src/utils/tabs.ts", "../../../src/prinzeugen/src/utils/curtain.ts", "../../../src/prinzeugen/src/utils/flicker.ts", "../../../src/prinzeugen/src/utils/console.ts", "../../../src/prinzeugen/src/utils/forms.ts", "../../../src/prinzeugen/src/utils/grabbers.ts", "../../../src/prinzeugen/src/grabbing.ts", "../../../src/prinzeugen/src/main.ts"],
  "sourcesContent": ["\r\nexport async function callAPI(action: string, data: Record<string, any>, useLogin = true){\r\n\tfunction safeParse(str: string){\r\n\t\treturn safe(() => JSON.parse(str));\r\n\t}\r\n\r\n\tlet login = null;\r\n\tif (useLogin){\r\n\t\tconst loginData = load(\"login\");\r\n\t\tlogin = {\r\n\t\t\tuser: loginData.id,\r\n\t\t\tuserToken: loginData.token\r\n\t\t};\r\n\t} \r\n\r\n\tconst response = await fetch(\"/api/prinzeugen/main\", {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t},\r\n\t\tbody: JSON.stringify(Object.assign({\r\n\t\t\taction: action\r\n\t\t}, data, login))\r\n\t});\r\n\r\n\tconst raw = await response.text();\r\n\tconst payload = safeParse(raw) || raw;\r\n\r\n\tif (response.status != 200) console.error(raw);\r\n\r\n\treturn {\r\n\t\tstatus: response.status,\r\n\t\theaders: response.headers,\r\n\t\tdata: payload\r\n\t};\r\n}\r\n\r\nexport function chunk<T>(a: T[], chunksize: number): T[][] {\r\n\tlet r: T[][] = [];\r\n\tfor (let i = 0; i < a.length; i += chunksize){\r\n\t\tr.push(a.slice(i, i + chunksize));\r\n\t}\r\n\treturn r;\r\n}\r\n\r\nexport function fromTemplate(id: string) {\r\n\treturn document.querySelector<HTMLTemplateElement>(`template#${id}`)?.content.cloneNode(true) ?? null;\r\n}\r\n\r\nexport function safe<T>(cb: () => T): T | null {\r\n\ttry {\r\n\t\treturn cb();\r\n\t} catch(e){\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport function sleep(ms: number) {\r\n\treturn new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function gbToUnix(raw: string) {\r\n\tconst r = raw.split(\" \")\r\n\tconst fixed = `${r[2]} ${r[1]} ${r[5]} ${r[3]} GMT`;\r\n\treturn Date.parse(fixed);\r\n}\r\n\r\nexport function setElementValue(query: string, value: any, propertyName = \"value\") {\r\n\tconst e = document.querySelector(query);\r\n\tif (e === null) return;\r\n\t(e as any)[propertyName] = value;\r\n}\r\n\r\nexport function load(key: string) {\r\n\treturn JSON.parse(localStorage.getItem(key) || \"null\");\r\n}\r\n\r\nexport function save(key: string, data: any) {\r\n\tif (data)\r\n\t\tlocalStorage.setItem(key, JSON.stringify(data));\r\n\telse\r\n\t\tlocalStorage.removeItem(key);\r\n}\r\n", "import { fromTemplate } from \"./utils\";\r\n\r\nexport function switchTabContent(group: string, target: string | null, content?: Node){\r\n\tconst container = document.querySelector<HTMLElement>(`*[data-tab-container=\"${group}\"]`);\r\n\tif (!container) {\r\n\t\tif (!target) return;\r\n\r\n\t\tconst variants = document.querySelectorAll<HTMLElement>(`*[data-tab-variant-group=\"${group}\"]`);\r\n\t\tif (variants.length === 0) return;\r\n\r\n\t\tvariants.forEach(v => {\r\n\t\t\tif (v.dataset.tabVariant === target) {\r\n\t\t\t\tv.classList.remove(\"hidden\");\r\n\t\t\t} else {\r\n\t\t\t\tv.classList.add(\"hidden\");\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn;\r\n\t};\r\n\tconst contents = target === null ? content : fromTemplate(`${group}-${target}`);\r\n\tif (!contents) return;\r\n\r\n\tconst storage = new DocumentFragment();\r\n\tstorage.append(...container.childNodes)\r\n\tcontainer.replaceChildren(contents);\r\n\tupdateTabListeners(container);\r\n\treturn storage;\r\n}\r\n\r\nexport function updateTabListeners(root: (HTMLElement | Document) = document){\r\n\tconst allTabs = root.querySelectorAll<HTMLElement>(\".tab\");\r\n\tallTabs.forEach(tab => {\r\n\t\tconst group = tab.dataset.tabGroup;\r\n\t\tconst tabId = tab.dataset.tabId;\r\n\t\tif (group === undefined || tabId === undefined) return;\r\n\r\n\t\tconst sibs = root.querySelectorAll(`.tab[data-tab-group=\"${group}\"]`);\r\n\t\ttab.addEventListener(\"click\", () => {\r\n\t\t\tif (tab.classList.contains(\"selected\")) return;\r\n\r\n\t\t\tsibs.forEach(t => t.classList.remove(\"selected\"));\r\n\t\t\ttab.classList.add(\"selected\");\r\n\t\t\tswitchTabContent(group, tabId);\r\n\t\t});\r\n\t});\r\n\r\n\troot.querySelectorAll<HTMLElement>(\"[data-tab-container]\").forEach(container => {\r\n\t\tconst tab = container.dataset.tabDefault;\r\n\t\tif (tab) {\r\n\t\t\tconst group = container.dataset.tabContainer;\r\n\t\t\tif (group === undefined) return;\r\n\r\n\t\t\tswitchTabContent(group, tab);\r\n\t\t}\r\n\t});\r\n}", "\r\nimport { switchTabContent } from \"./tabs\";\r\n\r\nlet pageLock = false;\r\nlet nodeStorage: Node | undefined;\r\n\r\nexport function pullCurtain(lock: boolean, message = \"Processing request\", noswitch = false){\r\n\tif (lock){\r\n\t\tif (pageLock) return false;\r\n\t\tpageLock = true;\r\n\r\n\t\tnodeStorage = switchTabContent(\"state\", \"curtain\");\r\n\r\n\t\tupdateCurtainMessage(message);\r\n\t} else {\r\n\t\tpageLock = false;\r\n\t\t\r\n\t\tif (!noswitch)\r\n\t\t\tswitchTabContent(\"state\", null, nodeStorage);\r\n\t\tnodeStorage = undefined;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nexport function updateCurtainMessage(message: string){\r\n\tconst curtain = document.querySelector(\"#curtain\");\r\n\tif (curtain) curtain.textContent = message;\r\n}", "\r\ntype GenericFlickerCallback = (content: string) => [string, string | undefined];\r\nexport function genericFlickerUpdate(taQ: string, flQ: string, cb: GenericFlickerCallback, root: (HTMLElement | Document) = document) {\r\n\tconst textarea = root.querySelector<HTMLTextAreaElement>(taQ);\r\n\tconst flicker = root.querySelector<HTMLElement>(flQ);\r\n\tif (!flicker) return;\r\n\r\n\tconst contents = textarea?.value.trim() ?? \"\";\r\n\r\n\tconst [text, color = \"hsla(0, 0%, 60%, .42)\"] = cb(contents);\r\n\r\n\tflicker.textContent = text;\r\n\tflicker.style.backgroundColor = color;\r\n}", "export function init(){\r\n\tconst console = document.querySelector<HTMLElement>(\".console\");\r\n\tif (!console) return;\r\n\r\n\tconsole.addEventListener(\"toggle\", () => console.dataset.unread = \"0\");\r\n}\r\n\r\nexport function report(message: string) {\r\n\tconst console = document.querySelector<HTMLDetailsElement>(\"details.console\");\r\n\tif (!console) return;\r\n\r\n\tif (console.dataset.unread === undefined) console.dataset.unread = \"0\";\r\n\r\n\tif (!console.open)\r\n\t\tconsole.dataset.unread = `${parseInt(console.dataset.unread, 10) + 1}`;\r\n\r\n\tconst contents = console.querySelector(\"details > div\");\r\n\tif (!contents) return;\r\n\r\n\tconst entry = document.createElement(\"div\");\r\n\tentry.textContent = message;\r\n\r\n\tcontents.prepend(entry);\r\n}\r\n", "import { fromTemplate } from \"./utils\";\r\n\r\nexport type FieldType = \"line\" | \"list\";\r\nexport type FieldSchema<T = Record<string, string>> = {\r\n\tkey: string,\r\n\ttype: FieldType,\r\n\tadditional: T\r\n}\r\nexport type FormSchema<T = Record<string, string>> = FieldSchema<T>[];\r\n\r\nexport function fieldSchema<T>(key: string, type: FieldType, additional: T): FieldSchema<T> {\r\n\treturn {\r\n\t\tkey,\r\n\t\ttype,\r\n\t\tadditional\r\n\t};\r\n}\r\n\r\nexport type PEFieldAdditionals = {\r\n\tlabel: string,\r\n\tplaceholder?: string\r\n};\r\n\r\nfunction fieldFromTemplate(field: FieldSchema<PEFieldAdditionals>){\r\n\tfunction getProto(id: string) {\r\n\t\tconst raw = fromTemplate(id);\r\n\t\tconst proto = (raw as HTMLElement)?.firstElementChild;\r\n\t\tif (proto){\r\n\t\t\treturn proto;\r\n\t\t} else {\r\n\t\t\tconsole.error(`Failed to render form field from template \"${id}\"`);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (field.type){\r\n\t\tcase (\"line\"): {\r\n\t\t\tconst templateName = \"generic-field-line\";\r\n\t\t\tconst proto = getProto(templateName);\r\n\t\t\tif (!proto) return null;\r\n\r\n\t\t\tconst label = proto.querySelector(\"label\");\r\n\t\t\tif (label) label.textContent = field.additional.label;\r\n\r\n\t\t\tconst input = proto.querySelector(\"input\");\r\n\t\t\tif (!input) {\r\n\t\t\t\tconsole.error(`Can't find <input> inside \"${templateName}\" template`);\r\n\t\t\t\treturn null;\r\n\t\t\t};\r\n\t\t\tinput.placeholder = field.additional.placeholder ?? \"\";\r\n\t\t\tinput.setAttribute(`data-grabber-form-${field.key}`, \"\");\r\n\r\n\t\t\treturn proto;\r\n\t\t}\r\n\t\tcase (\"list\"): {\r\n\t\t\tconst templateName = \"generic-field-multiline\";\r\n\t\t\tconst proto = getProto(templateName);\r\n\t\t\tif (!proto) return null;\r\n\r\n\t\t\tconst label = proto.querySelector(\"label\");\r\n\t\t\tif (label) label.textContent = field.additional.label;\r\n\r\n\t\t\tconst textarea = proto.querySelector(\"textarea\");\r\n\t\t\tif (!textarea) {\r\n\t\t\t\tconsole.error(`Can't find <textarea> inside \"${templateName}\" template`);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\ttextarea.placeholder = field.additional.placeholder ?? \"\";\r\n\t\t\ttextarea.setAttribute(`data-grabber-form-${field.key}`, \"\");\r\n\r\n\t\t\treturn proto;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function renderForm(schema: FormSchema<PEFieldAdditionals>): DocumentFragment {\r\n\tconst container = new DocumentFragment();\r\n\tconst rendered = schema\r\n\t\t.map(s => fieldFromTemplate(s))\r\n\t\t.filter(s => s !== null) as Element[];\r\n\tcontainer.append(...rendered);\r\n\treturn container;\r\n}\r\n\r\nexport function getFieldElement(container: HTMLElement, fieldKey: string) {\r\n\treturn container.querySelector(`*[data-grabber-form-${fieldKey}]`);\r\n}\r\n\r\nexport function readForm(container: HTMLElement, schema: FormSchema<PEFieldAdditionals>) {\r\n\tfunction readField(fieldKey: string, fieldType: string){\r\n\t\tconst fieldElement = getFieldElement(container, fieldKey);\r\n\t\tif (!fieldElement) return null;\r\n\r\n\t\treturn (fieldElement as any)?.value ?? null;\r\n\t}\r\n\r\n\tconst r: Record<string, string> = {};\r\n\r\n\tschema.forEach(s => {\r\n\t\tconst v = readField(s.key, s.type);\r\n\t\tr[s.key] = v;\r\n\t});\r\n\r\n\treturn r;\r\n}\r\n\r\nexport function fillForm(form: HTMLElement, data: Record<string, string>) {\r\n\tfor (const key of Object.keys(data)){\r\n\t\tconst field = getFieldElement(form, key);\r\n\t\tif (field)\r\n\t\t\t(field as any).value = data[key];\r\n\t}\r\n\treturn form;\r\n}\r\n", "import * as forms from \"./forms\";\r\n\r\nfunction tagList(raw: string): string[] {\r\n\treturn raw\r\n\t\t.split(\"\\n\")\r\n\t\t.map(line => line.trim().replaceAll(\" \", \"_\"))\r\n\t\t.filter(tag => tag != \"\");\r\n}\r\n\r\nexport type Grabber = {\r\n\ttype: GrabberType,\r\n\tform: forms.FormSchema<forms.PEFieldAdditionals>,\r\n\tread: (container: HTMLElement) => any,\r\n\tfill: (container: HTMLElement, data: any) => void\r\n};\r\n\r\nexport const GLB_FORM: forms.FormSchema<forms.PEFieldAdditionals> = [\r\n\tforms.fieldSchema<forms.PEFieldAdditionals>(\"user\", \"line\", {\r\n\t\tlabel: \"Gelbooru user\"\r\n\t}),\r\n\tforms.fieldSchema<forms.PEFieldAdditionals>(\"api\", \"line\", {\r\n\t\tlabel: \"Gelbooru API key\"\r\n\t}),\r\n\tforms.fieldSchema<forms.PEFieldAdditionals>(\"tags\", \"list\", {\r\n\t\tlabel: \"Tags\"\r\n\t}),\r\n\tforms.fieldSchema<forms.PEFieldAdditionals>(\"whitelist\", \"list\", {\r\n\t\tlabel: \"Whitelist\",\r\n\t\tplaceholder: \"sort:id:asc and id:>lastseen are added autmoatically\"\r\n\t}),\r\n\tforms.fieldSchema<forms.PEFieldAdditionals>(\"blacklist\", \"list\", {\r\n\t\tlabel: \"Blacklist\"\r\n\t}),\r\n\tforms.fieldSchema<forms.PEFieldAdditionals>(\"lastSeen\", \"line\", {\r\n\t\tlabel: \"Last checked post ID\"\r\n\t})\r\n];\r\n\r\ntype GelbooruGrabberInstance = {\r\n\ttype: \"gelbooru\",\r\n\tcredentials: {\r\n\t\tuser: number,\r\n\t\ttoken: string\r\n\t},\r\n\tconfig: {\r\n\t\ttags: string[],\r\n\t\twhites: string[],\r\n\t\tblacks: string[],\r\n\t\tmoderated: boolean\r\n\t},\r\n\tstate: {\r\n\t\tlastSeen: number\r\n\t}\r\n};\r\n\r\nconst GelbooruGrabber: Grabber = {\r\n\ttype: \"gelbooru\",\r\n\tform: GLB_FORM,\r\n\tread: container => {\r\n\t\tconst formData = forms.readForm(container, GLB_FORM);\r\n\t\tconst instance: GelbooruGrabberInstance = {\r\n\t\t\ttype: \"gelbooru\",\r\n\t\t\tcredentials: {\r\n\t\t\t\tuser: parseInt(formData.user?.trim() ?? \"0\", 10),\r\n\t\t\t\ttoken: formData.api?.trim()\r\n\t\t\t},\r\n\t\t\tconfig: {\r\n\t\t\t\ttags: formData.tags ? tagList(formData.tags) : [\"\"],\r\n\t\t\t\twhites: formData.whitelist ? tagList(formData.whitelist) : [\"\"],\r\n\t\t\t\tblacks: formData.blacklist ? tagList(formData.blacklist) : [\"\"],\r\n\t\t\t\tmoderated: true\r\n\t\t\t},\r\n\t\t\tstate: {\r\n\t\t\t\tlastSeen: parseInt(formData.lastSeen ?? \"0\", 10)\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn instance;\r\n\t},\r\n\tfill: (container, data: GelbooruGrabberInstance) => {\r\n\t\tconst formData = {\r\n\t\t\tuser: `${data.credentials.user}`,\r\n\t\t\tapi: data.credentials.token,\r\n\r\n\t\t\ttags: data.config.tags.join(\"\\n\"),\r\n\t\t\tblacklist: data.config.blacks.join(\"\\n\"),\r\n\t\t\twhitelist: data.config.whites.join(\"\\n\"),\r\n\r\n\t\t\tlastSeen: `${data.state.lastSeen}`\r\n\t\t};\r\n\t\tforms.fillForm(container, formData);\r\n\r\n\t\t// forms.getFieldElement(\"tags\")?.addEventListener(\"input\", () => updateGrabberFlicker(el));\r\n\t\t// forms.getFieldElement(\"blacklist\")?.addEventListener(\"input\", () => updateGrabberFlicker(el));\r\n\t}\r\n}\r\n// function updateGrabberFlicker(el: HTMLElement) {\r\n// \tgenericFlickerUpdate(\"#gb_tags\", \"#gb_tflicker\", contents => [contents.split(\"\\n\").length], el);\r\n// \tgenericFlickerUpdate(\"#gb_blacks\", \"#gb_bflicker\", contents => [contents.split(\"\\n\").length], el);\r\n// }\r\n\r\nexport const Grabbers = {\r\n\t\"gelbooru\": GelbooruGrabber\r\n};\r\n\r\nexport type GrabberType = keyof typeof Grabbers;", "import { callAPI, fromTemplate } from \"./utils/utils\";\r\nimport { Grabbers } from \"./utils/grabbers\";\r\nimport type { Grabber, GrabberType } from \"./utils/grabbers\"\r\nimport { listenToKeyboard } from \"./utils/io\";\r\nimport { updateTabListeners, switchTabContent } from \"./utils/tabs\";\r\nimport { pullCurtain, updateCurtainMessage } from \"./utils/curtain\";\r\nimport { report } from \"./utils/console\";\r\n\r\nimport * as forms from \"./utils/forms\";\r\n\r\nexport async function downloadGrabbers(): Promise<any[] | null> {\r\n\tconst grabbers = await callAPI(\"getGrabbers\", {}, true);\r\n\tif (grabbers.status == 200)\r\n\t\treturn grabbers.data;\r\n\telse\r\n\t\treturn null;\r\n}\r\n\r\nexport function showGrabbers(grabs: any[]){\r\n\tconst list = document.querySelector<HTMLElement>(\"#grabbers-list\");\r\n\tif (!list) return;\r\n\tlist.innerHTML = \"\";\r\n\r\n\tgrabs.forEach((g, i) => {\r\n\t\tconst meta: Grabber = Grabbers[g.type as GrabberType];\r\n\t\tconst proto = renderGrabber(g.type, i);\r\n\t\tif (!proto) return;\r\n\r\n\t\tmeta.fill(proto, g);\r\n\r\n\t\tlist.appendChild(proto);\r\n\t});\r\n}\r\n\r\nexport async function manualGrab(){\r\n\tpullCurtain(true);\r\n\tconst grabbersReference = await downloadGrabbers();\r\n\tif (!grabbersReference) {\r\n\t\tpullCurtain(false);\r\n\t\treturn;\r\n\t}\r\n\tlet newRows: any[] = [];\r\n\tfor (let i = 0; i < grabbersReference.length; ++i){\r\n\t\tupdateCurtainMessage(`Grabbing: ${i} / ${grabbersReference.length} done`);\r\n\t\tconst response = await callAPI(\"grab\", {id: i}, true);\r\n\t\tif (response.status != 200){\r\n\t\t\treport(`Grab #${i} failed`);\r\n\t\t\tconsole.error(response);\r\n\t\t} else\r\n\t\t\tnewRows = newRows.concat(response.data);\r\n\t}\r\n\treport(`${newRows.length} new entries`);\r\n\r\n\tupdateCurtainMessage(`Updating state`);\r\n\tconst updateGrabbers = await downloadGrabbers();\r\n\t// await reloadModerables(false);\r\n\r\n\tpullCurtain(false);\r\n\t\r\n\tif (updateGrabbers) showGrabbers(updateGrabbers);\r\n}\r\n\r\nexport async function selectiveGrab(grabberId: number, batchSize?: number){\r\n\tpullCurtain(true);\r\n\tlet newRows: any[] = [];\r\n\r\n\tconst params = {\r\n\t\tid: grabberId,\r\n\t\t...(batchSize ? {batchSize: batchSize} : {})\r\n\t};\r\n\r\n\tupdateCurtainMessage(`Grabbing #${grabberId}`);\r\n\tconst response = await callAPI(\"grab\", params, true);\r\n\tif (response.status != 200){\r\n\t\treport(`Grab #${grabberId} failed`);\r\n\t\tconsole.error(response);\r\n\t} else\r\n\t\tnewRows.push(response.data);\r\n\t\r\n\treport(`${newRows.length} new entries`);\r\n\r\n\tupdateCurtainMessage(`Updating state`);\r\n\tconst updateGrabbers = await downloadGrabbers();\r\n\t// await reloadModerables(false);\r\n\r\n\tpullCurtain(false);\r\n\r\n\tif (updateGrabbers) showGrabbers(updateGrabbers);\r\n}\r\n\r\nexport async function saveGrabbers(){\r\n\tconst list = document.querySelector<HTMLElement>(\"#grabbers-list\");\r\n\tconst grabs = Array.from(list?.children ?? [])\r\n\t\t.map(el => {\r\n\t\t\tconst container = el as HTMLElement;\r\n\t\t\tconsole.log(container);\r\n\t\t\tconsole.log(container?.dataset.grabberForm);\r\n\t\t\treturn Grabbers[container?.dataset.grabberForm as GrabberType].read(container)\r\n\t\t});\r\n\t\r\n\r\n\tpullCurtain(true);\r\n\tconst response = await callAPI(\"setGrabbers\", {\r\n\t\tgrabbers: grabs\r\n\t});\r\n\r\n\tconst updateGrabbers = response.status === 200 ? await downloadGrabbers() : null;\r\n\tpullCurtain(false);\r\n\tif (updateGrabbers) showGrabbers(updateGrabbers);\r\n}\r\n\r\nexport function addGrabber(type: GrabberType){\r\n\tconst list = document.querySelector(\"#grabbers-list\");\r\n\tconst proto = renderGrabber(type);\r\n\tif (proto && list) list.appendChild(proto);\r\n}\r\n\r\nexport function renderGrabber(type: GrabberType, index?: number) {\r\n\tconst meta = Grabbers[type];\r\n\tif (!meta) return null;\r\n\r\n\tconst proto = (fromTemplate(\"generic-grabber\") as Element)?.firstElementChild as HTMLElement;\r\n\tif (!proto) return null;\r\n\tconst buttons = proto.querySelector(\"div\");\r\n\tif (!buttons) return null;\r\n\r\n\tproto.dataset.grabberForm = type;\r\n\r\n\tproto.appendChild(forms.renderForm(meta.form));\r\n\r\n\tconst [grab, less, remv] = [\r\n\t\tbuttons.querySelector<HTMLButtonElement>(`[data-grabber-button=\"grab\"]`),\r\n\t\tbuttons.querySelector<HTMLButtonElement>(`[data-grabber-button=\"less\"]`),\r\n\t\tbuttons.querySelector<HTMLButtonElement>(`[data-grabber-button=\"remv\"]`)\r\n\t];\r\n\r\n\tremv?.addEventListener(\"click\", () => {\r\n\t\tproto.remove();\r\n\t});\r\n\r\n\tif (index === undefined){\r\n\t\tconst hint = document.createElement(\"div\");\r\n\t\thint.textContent = \"Save grabbers before grabbing\";\r\n\t\tproto.insertBefore(hint, proto.children[0]);\r\n\t\tif (grab) grab.disabled = true;\r\n\t\tif (less) less.disabled = true;\r\n\t} else {\r\n\t\tif (grab) grab.addEventListener(\"click\", () => selectiveGrab(index));\r\n\t\tif (less) less.addEventListener(\"click\", () => selectiveGrab(index, 50));\r\n\t}\r\n\t\r\n\tproto.appendChild(buttons);\r\n\r\n\treturn proto as HTMLElement;\r\n}", "import { callAPI, safe, sleep, setElementValue, load, save } from \"./utils/utils\";\r\nimport { Grabbers } from \"./utils/grabbers\";\r\nimport type { GrabberType } from \"./utils/grabbers\"\r\nimport { listenToKeyboard } from \"./utils/io\";\r\nimport { updateTabListeners, switchTabContent } from \"./utils/tabs\";\r\nimport { pullCurtain, updateCurtainMessage } from \"./utils/curtain\";\r\nimport { genericFlickerUpdate } from \"./utils/flicker\";\r\nimport { init as initConsole, report } from \"./utils/console\";\r\n\r\nimport { addGrabber, saveGrabbers, showGrabbers } from \"./grabbing\";\r\n\r\nconst PLACEHOLDER_URL = \"placeholder.png\";\r\n\r\nmain();\r\n\r\nasync function main(){\r\n\tupdateTabListeners();\r\n\r\n\t// window.addEventListener(\"error\", (event, source, lineno, colno, error) => {\r\n\t// \treport(`${event.message}\\n\\n${source} ${lineno}:${colno}`);\r\n\t// });\r\n\tdocument.querySelector(\"#form-login\")?.addEventListener(\"submit\", e => login(e));\r\n\r\n\tconst loginData = load(\"login\");\r\n\tif (loginData != null){\r\n\t\tpullCurtain(true, \"Loading\");\r\n\t\tconst loginResponse = await callAPI(\"login\", {\r\n\t\t\tuser: loginData.id,\r\n\t\t\tuserToken: loginData.token\r\n\t\t}, false);\r\n\r\n\t\tpullCurtain(false);\r\n\r\n\t\tif (loginResponse.status == 200)\r\n\t\t\tauthorize(loginResponse.data);\r\n\t}\r\n\r\n\t// listenToKeyboard(false, [\r\n\t// \t{\r\n\t// \t\tkeys: [\"Comma\"],\r\n\t// \t\taction: () => decide(true)\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\tkeys: [\"Period\"],\r\n\t// \t\taction: () => decide(false)\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\tkeys: [\"Digit0\"],\r\n\t// \t\taction: () => upscalePreview()\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\tkeys: [\"ShiftRight\", \"KeyM\"],\r\n\t// \t\taction: () => fixFocus()\r\n\t// \t}\r\n\t// ]);\r\n}\r\n\r\nasync function authorize(userData: any){\r\n\tswitchTabContent(\"state\", \"online\");\r\n\r\n\tsetElementValue(\"#settings-password\", \"\");\r\n\tsetElementValue(\"#settings-tg-token\", userData.tg_token);\r\n\tsetElementValue(\"#settings-additional\", userData.additional);\r\n\tdocument\r\n\t\t.querySelector<HTMLTextAreaElement>(\"#settings-additional\")\r\n\t\t?.addEventListener(\"input\", updateSettingsFlicker);\r\n\tupdateSettingsFlicker();\r\n\r\n\tdocument\r\n\t\t.querySelectorAll<HTMLElement>(\"[data-add-grabber]\")\r\n\t\t.forEach(b =>\r\n\t\t\tb.addEventListener(\"click\", () => {\r\n\t\t\t\tif (b.dataset.addGrabber === undefined) return;\r\n\t\t\t\taddGrabber(b.dataset.addGrabber as GrabberType)\r\n\t\t\t})\r\n\t\t);\r\n\tdocument\r\n\t\t.querySelector<HTMLElement>(\"#grabbers-save\")\r\n\t\t?.addEventListener(\"click\", () => saveGrabbers());\r\n\r\n\tinitConsole();\r\n\r\n\tshowGrabbers(userData.grabbers);\r\n\t// loadModerables(userData.moderables);\r\n\r\n\treport(`Welcome back, ${userData.name}. You have ${userData.postsScheduled} post${userData.postsScheduled == 1 ? \"\" : \"s\"} in pool, ${userData.moderables.length} pending moderation`)\r\n}\r\n\r\nasync function login(e: Event){\r\n\te.preventDefault();\r\n\tconst id = document.querySelector<HTMLInputElement>(\"#login-id\")?.value;\r\n\tconst token = document.querySelector<HTMLInputElement>(\"#login-token\")?.value ?? \"\";\r\n\r\n\tif (!id) return;\r\n\r\n\tif (!pullCurtain(true)) return;\r\n\r\n\tconst parsedId = safe(() => parseInt(id, 10)) || 0;\r\n\tconst response = await callAPI(\"login\", {\r\n\t\tuser: parsedId,\r\n\t\tuserToken: token\r\n\t}, false);\r\n\r\n\tpullCurtain(false);\r\n\tif (response.status == 200) {\r\n\t\tsave(\"login\", {\r\n\t\t\tid: parsedId,\r\n\t\t\ttoken: token\r\n\t\t});\r\n\t\tauthorize(response.data);\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n\r\n\r\n// async function manualCache(){\r\n// \tpullCurtain(true);\r\n\t\r\n// \tconst status = await callAPI(\"linkCache\", {}, true);\r\n// \tif (status.status != 200){\r\n// \t\tconsole.error(status);\r\n// \t\tpullCurtain(false);\r\n// \t\treturn;\r\n// \t}\r\n\r\n// \tlet counter = 0;\r\n// \tconst targets = status.data.leftUncached;\r\n// \tfor (let target of targets){\r\n// \t\tupdateCurtainMessage(`Downloading images: ${counter} / ${targets.length} done`);\r\n// \t\t++counter;\r\n\t\t\r\n// \t\tconst r = await callAPI(\"downloadCache\", {\r\n// \t\t\tid: target.id\r\n// \t\t}, true);\r\n// \t\tif (r.status != 201)\r\n// \t\t\tconsole.warn(r);\r\n// \t}\r\n\r\n// \tconst newStatus = await callAPI(\"linkCache\", {}, true);\r\n// \treport(`Caching complete. ${newStatus.data?.leftUncached?.length} left uncached.`);\r\n// \tconsole.log(newStatus);\r\n\r\n// \tupdateCurtainMessage(`Updating moderables`);\r\n// \tawait reloadModerables(false);\r\n\r\n// \tpullCurtain(false);\r\n// }\r\n\r\n// async function reloadModerables(pullCurtains = true){\r\n// \tif (pullCurtains) pullCurtain(true);\r\n// \tconst messages = await callAPI(\"getModerables\", null, true);\r\n// \tloadModerables(messages.data);\r\n// \tif (pullCurtains) pullCurtain(false);\r\n// }\r\n\r\n// function loadModerables(messages){\r\n// \tconst mod_list = document.querySelector(\"#mdr_list\");\r\n// \taiMode = load(\"login\").id == 3;\r\n// \tmod_list.innerHTML = \"\";\r\n// \tmessages.forEach(m => {\r\n// \t\tif (aiMode)\r\n// \t\t\tmod_list.appendChild(renderAiModerable(m.message, m.id));\r\n// \t\telse\r\n// \t\t\tmod_list.appendChild(renderModerable(m.message, m.id));\r\n// \t});\r\n// }\r\n\r\n// function renderModerable(message, id){\r\n// \tif (message.version != 3){\r\n// \t\tconsole.error(\"Unsupported message version\");\r\n// \t\treturn;\r\n// \t}\r\n// \tconst proto = fromTemplate(\"moderation_item\");\r\n// \tproto.dataset.id = id;\r\n// \tproto.dataset.original = message.content;\r\n// \tif (message.cached) proto.dataset.upscaled = \"weewee\";\r\n\r\n// \tconst preview = message.cached ? message.cachedContent.preview : message.preview;\r\n// \tconst source = message.links[0].url;\r\n\r\n// \tproto.querySelector(\"a\").href = source;\r\n// \tproto.querySelector(\"img\").src = preview;\r\n\r\n// \tconst tagList = proto.querySelector(\".row\");\r\n// \tfunction renderTag(text, color){\r\n// \t\tconst e = fromTemplate(\"moderation_tag\");\r\n// \t\te.textContent = text;\r\n// \t\te.style.backgroundColor = color;\r\n// \t\treturn e;\r\n// \t}\r\n// \tif (message.nsfw)\r\n// \t\ttagList.appendChild(renderTag(\"NSFW\", \"rgba(200, 0, 0, .3\"));\r\n// \tif (message.tags?.includes(\"animated\"))\r\n// \t\ttagList.appendChild(renderTag(\"animated\", \"rgba(50, 50, 200, .3\"));\r\n// \tif (message.tags?.includes(\"animated_gif\"))\r\n// \t\ttagList.appendChild(renderTag(\"GIF\", \"rgba(50, 50, 200, .3\"));\r\n// \tif (message.tags?.includes(\"video\"))\r\n// \t\ttagList.appendChild(renderTag(\"video\", \"rgba(50, 50, 200, .3\"));\r\n// \tif (message.artists)\r\n// \t\tmessage.artists.forEach(artist => tagList.appendChild(renderTag(`\uD83C\uDFA8 ${artist}`, \"rgba(250, 250, 250, .7\")));\r\n\r\n// \tconst buttons = proto.querySelectorAll(\".button\");\r\n// \tbuttons[0].textContent = \"Approve\";\r\n// \tbuttons[0].addEventListener(\"click\", () => {\r\n// \t\tproto.classList.remove(\"rejected\");\r\n// \t\tproto.classList.add(\"approved\");\r\n// \t});\r\n// \tbuttons[1].textContent = \"Reject\";\r\n// \tbuttons[1].addEventListener(\"click\", () => {\r\n// \t\tproto.classList.add(\"rejected\");\r\n// \t\tproto.classList.remove(\"approved\");\r\n// \t});\r\n\r\n// \tproto.addEventListener(\"focusin\", e => proto.scrollIntoView({/*behavior: \"smooth\", */block: \"center\"}));\r\n// \tproto.addEventListener(\"mousedown\", e => e.preventDefault());\r\n\r\n// \treturn proto;\r\n// }\r\n\r\n// const UPSCALE_RETRY_COUNT = 3;\r\n// async function upscalePreview(){\r\n// \tasync function upscale(e, retriesLeft = UPSCALE_RETRY_COUNT){\r\n// \t\tif (e.dataset.upscaled === \"weewee\" && retriesLeft === UPSCALE_RETRY_COUNT) return;\r\n// \t\te.dataset.upscaled = \"weewee\";\r\n\r\n// \t\tconst url = `/api/imgproxy?j=1&w=0&url=${e.dataset.original}`;\r\n// \t\tconst response = await fetch(url);\r\n// \t\tif (response.status === 504) {\r\n// \t\t\tif (retriesLeft <= 0) return;\r\n// \t\t\tawait sleep(Math.random() * 5000);\r\n// \t\t\tawait upscale(e, retriesLeft - 1);\r\n// \t\t\treturn;\r\n// \t\t}\r\n// \t\tif (!response.ok) return;\r\n// \t\tif (!response.headers.get(\"content-type\").startsWith(\"image/\")) return;\r\n// \t\tconst data = await response.arrayBuffer();\r\n// \t\tconst blob = new Blob([data]);\r\n// \t\te.querySelector(\"img\").src = URL.createObjectURL(blob);\r\n// \t}\r\n\r\n// \tconst targets = Array.from(document.querySelectorAll(\".previewSection\"));\r\n// \tconst chomnks = chunk(targets, 7);\r\n// \tfor (const chonk of chomnks) {\r\n// \t\tconst scaleJobs = chonk.map(e => upscale(e));\r\n// \t\tawait Promise.allSettled(scaleJobs);\r\n// \t\tconsole.log(\"chonk done\");\r\n// \t};\r\n// \tscalingLock = false;\r\n// }\r\n\r\n// function fixFocus(){\r\n// \tconst previews =  Array.from(document.querySelectorAll(\".previewSection\"));\r\n// \tif (previews.length === 0) return;\r\n// \tconst target = previews.find(p => !(p.classList.contains(\"approved\") || p.classList.contains(\"rejected\")));\r\n// \tif (target)\r\n// \t\ttarget.focus();\r\n// \telse\r\n// \t\tpreviews[0].focus();\r\n// }\r\n\r\n// function decide(approve){\r\n// \tconst focused = document.activeElement;\r\n// \tif (!focused.classList.contains(\"previewSection\")) return;\r\n// \tif (typeof approve == \"boolean\")\r\n// \t\tfocused.querySelectorAll(\".button\")[approve ? 0 : 1].click();\r\n// \telse\r\n// \t\tfocused.querySelectorAll(\".button\")[approve].click();\r\n\r\n// \tconst nextSib = focused.nextElementSibling;\r\n// \tif (nextSib?.classList.contains(\"previewSection\")) \r\n// \t\tnextSib.focus();\r\n// \telse\r\n// \t\tdocument.querySelector(\"#moderateButton\").scrollIntoView({behavior: \"smooth\", block: \"center\"});\r\n// }\r\n\r\n// async function moderate(){\r\n// \tif (decisions.length == 0) return;\r\n\r\n// \tpullCurtain(true);\r\n// \tconst newModerables = await callAPI(\"moderate\", {decisions: decisions}, true);\r\n\t\r\n// \tloadModerables(newModerables.data);\r\n// \tpullCurtain(false);\r\n// }\r\n\r\n// function setPreviewPost(row){\r\n// \tconst main = document.querySelector(\"#poolPostMain\");\r\n// \tconst preview = main.querySelector(\"img\");\r\n// \tif (row.message.version == 3){\r\n// \t\tpreview.src = row.message.cached ? row.message.cachedContent.preview : row.message.preview;\r\n// \t} else {\r\n// \t\tpreview.src = row ? row.message.raw.preview || row.message.image[0] : PLACEHOLDER_URL;\r\n// \t}\r\n\t\r\n\r\n// \tconst links = main.querySelector(\"#poolPostLinks\");\r\n// \tlinks.innerHTML = \"\";\r\n// \tfor (let link of row.message?.links || []){\r\n// \t\tconst proto = fromTemplate(\"poolPostLink\");\r\n// \t\tproto.href = link.url;\r\n// \t\tproto.textContent = link.text;\r\n// \t\tlinks.appendChild(proto);\r\n// \t}\r\n\r\n// \tconst controls = main.querySelector(\"#poolPostControls\");\r\n// \tcontrols.innerHTML = \"\";\r\n\r\n// \tif (row){\r\n// \t\tconst unsch = fromTemplate(\"poolButton\");\r\n// \t\tunsch.textContent = \"Unschedule\";\r\n// \t\tunsch.addEventListener(\"click\", () => unschedulePost(row));\r\n\r\n// \t\tconst copyd = fromTemplate(\"poolButton\");\r\n// \t\tcopyd.textContent = \"Show row data in console\";\r\n// \t\tcopyd.addEventListener(\"click\", () => console.log(row));\r\n\r\n// \t\tcontrols.appendChild(unsch);\r\n// \t\tcontrols.appendChild(copyd);\r\n// \t}\r\n\r\n// \tpreview.scrollIntoView({behavior: \"smooth\", block: \"center\"})\r\n// }\r\n\r\n// async function unschedulePost(row){\r\n// \tif (!row?.id) return;\r\n// \tpullCurtain(true);\r\n// \tconst response = await callAPI(\"unschedulePost\", {\r\n// \t\tid: row.id\r\n// \t}, true);\r\n\r\n// \tif (response.status < 300){\r\n// \t\tsetPreviewPost(null);\r\n// \t\tconst remTarget = Array.from(document.querySelectorAll(\".poolPreviewItem\")).find(e => e.dataset.id == row.id);\r\n// \t\tremTarget.remove();\r\n// \t}\r\n// \tpullCurtain(false);\r\n// }\r\n\r\n// async function loadMessagePool(page = 0){\r\n// \tconst STRIDE = 64;\r\n// \tconst container = document.querySelector(\".poolPreviewContainer\");\r\n// \tcontainer.innerHTML = \"\";\r\n\r\n// \tpullCurtain(true);\r\n// \tconst rows = await callAPI(\"getPoolPage\", {\r\n// \t\tpage: page,\r\n// \t\tstride: STRIDE\r\n// \t}, true);\r\n\r\n// \tfor (let row of rows.data.rows){\r\n// \t\tconst proto = fromTemplate(\"poolPreviewItem\");\r\n// \t\tproto.dataset.id = row.id;\r\n// \t\tconst img = proto.querySelector(\"img\");\r\n// \t\tif (row.message.version == 1){\r\n// \t\t\timg.src = row.message.raw?.preview || row.message.image[0];\r\n// \t\t} else if (row.message.version == 3) {\r\n// \t\t\timg.src = row.message.cached ? row.message.cachedContent.preview : row.message.preview;\r\n// \t\t} else {\r\n// \t\t\timg.src = PLACEHOLDER_URL;\r\n// \t\t}\r\n// \t\timg.addEventListener(\"click\", () => setPreviewPost(row));\r\n\t\t\r\n// \t\tcontainer.appendChild(proto);\r\n// \t}\r\n\r\n// \tconst pager = document.querySelector(\"#poolPageControls\");\r\n// \tpager.innerHTML = \"\";\r\n// \tconst postCount = rows.data.count;\r\n// \tconst pageCount = Math.ceil(postCount / STRIDE);\r\n// \tfor (let i = 0; i < pageCount; ++i){\r\n// \t\tconst pageSelector = fromTemplate(\"poolButton\");\r\n// \t\tpageSelector.textContent = i + 1;\r\n// \t\tpageSelector.addEventListener(\"click\", () => loadMessagePool(i));\r\n// \t\tpager.appendChild(pageSelector);\r\n// \t}\r\n\r\n// \tpullCurtain(false);\r\n// }\r\n\r\nlet wipeLock = true;\r\nasync function wipePool(){\r\n\tif (wipeLock){\r\n\t\twipeLock = false;\r\n\t\tconsole.log(\"safety off. call function again to wipe current pool\");\r\n\t} else {\r\n\t\twipeLock = true;\r\n\t\tpullCurtain(true);\r\n\t\tconst wipeResponse = await callAPI(\"wipePool\", {}, true);\r\n\t\tpullCurtain(false);\r\n\t\tif (wipeResponse.status === 200)\r\n\t\t\tlocation.reload();\r\n\t}\r\n}\r\n\r\nfunction updateSettingsFlicker(){\r\n\tgenericFlickerUpdate(\"#settings-additional\", \"#settings-flicker\",\r\n\t\tcontents => {\r\n\t\t\tif (contents){\r\n\t\t\t\tconst parsed = safe(() => JSON.parse(contents));\r\n\t\t\t\tif (parsed === null){\r\n\t\t\t\t\treturn [\"Not JSON\", \"hsla(20, 72%, 23%, .42)\"];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn [\"JSON\", \"hsla(100, 72%, 23%, .42)\"];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn [\"Empty\", \"hsla(0, 0%, 60%, .42)\"];\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n}\r\n\r\nasync function saveSettings(){\r\n\tconst newPassword = document.querySelector<HTMLInputElement>(\"#stg_access\")?.value.trim() || null;\r\n\tconst tgToken = document.querySelector<HTMLInputElement>(\"#stg_tg\")?.value || null;\r\n\tconst additionals = document.querySelector<HTMLTextAreaElement>(\"#stg_additional\")?.value;\r\n\r\n\tpullCurtain(true);\r\n\tawait callAPI(\"saveSettings\", {\r\n\t\tnewUserToken: newPassword,\r\n\t\tnewTgToken: tgToken,\r\n\t\tadditionalData: additionals\r\n\t}, true);\r\n\tif (newPassword) signOut();\r\n\tpullCurtain(false);\r\n}\r\n\r\nfunction signOut(){\r\n\tsave(\"login\", null);\r\n\tswitchTabContent(\"state\", \"login\");\r\n}\r\n\r\n// function report(msg){\r\n// \tlet message = document.createElement(\"div\");\r\n// \tmessage.textContent = msg;\r\n\r\n// \tdocument.querySelector(\"#statuslog\").prepend(message);\r\n\r\n// \tArray.from(document.querySelector(\"#statuslog\").children).forEach((c, i) => c.style.opacity = (100 / (i + 1)) + \"%\");\r\n// }"],
  "mappings": "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",
  "names": ["login", "console"]
}
